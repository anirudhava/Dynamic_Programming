/*Given a value V. You have to make change for V cents, given that you have infinite supply of each of C{ C1, C2, .. , Cm} valued coins. 
Find the minimum number of coins to make the change.

Input:
The first line of input contains an integer T denoting the number of test cases. The first line of each test case is V and N, V is the value of cents 
and N is the number of coins. The second line of each test case contains N input C[i], value of available coins.

Output:
Print the minimum number of coins to make the change, if not possible print "-1".

Constraints:
1 ≤ T ≤ 100
1 ≤ V ≤ 106
1 ≤ N ≤ 106
1 ≤ C[i] ≤ 106

Example:
Input:
1
7 2
2 1

Output:
4*/
#include <stdio.h>
#include <stdlib.h>

int min(int x,int y)
{
    return (x<y)?x:y;    
}

int min_coins(int* coins,int n,int amt)
{
    int dp[amt+1];
    
    for(int i=0;i<=amt;i++)
        dp[i]=amt+1;
    
    dp[0]=0;
    
    for(int i=1;i<=amt;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(i-coins[j]>=0)
                dp[i]=min(dp[i],dp[i-coins[j]]+1);
        }
    }
    
    if(dp[amt]==amt+1)
        return -1;
    return dp[amt];
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    int amt;
	    int n;
	    
	    scanf("%d",&amt);
	    scanf("%d",&n);
	    
	    int* coins;
	    coins=(int*)malloc(sizeof(int)*n);
	    
	    for(int i=0;i<n;i++)
	    {
	        scanf("%d",&coins[i]);
	    }
	    
	    printf("%d\n",min_coins(coins,n,amt));
	}
	return 0;
}