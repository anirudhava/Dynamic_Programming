/*Given a String, find the longest palindromic subsequence

Input:
The first line of input contains an integer T, denoting no of test cases. The only line of each test case consists of a string S(only lowercase)

Output:
Print the Maximum length possible for palindromic subsequence.

Constraints:
1<=T<=100
1<=|Length of String|<=1000
 

Examples:
Input:
2
bbabcbcab
abbaab
Output:
7
4*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int max(int x,int y)
{
    return (x>y)?x:y;
}

int longest_palin_subseq(char* str,int n)
{
    int str2[n+1];
    
    for(int i=n-1;i>=0;i--)
    {
        str2[n-i-1]=str[i];    
    }
    
    int dp[n+1][n+1];
    
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=dp[0][i]=0;
    }
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(str[i-1]==str2[j-1])
            {
                dp[i][j]=dp[i-1][j-1]+1;
            }
            else
            {
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    
    return dp[n][n];
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    char str[10000];
	    scanf("%s",str);
	    
	    int n;
	    n=strlen(str);
	    
	    printf("%d\n",longest_palin_subseq(str,n));
	}
	return 0;
}