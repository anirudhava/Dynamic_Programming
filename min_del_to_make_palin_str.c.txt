/*Given a string 'str' of size ‘n’. The task is to remove or delete minimum number of characters from the string so that the
resultant string is palindrome.

Note: The order of characters should be maintained.

Input:

The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case 
contains an integer N denoting the length of string str.

The second line of each test case contains the string str.


Output:

Print the minimum number of characters to be deleted to make the string a palindrome for each testcase in a new line.


Constraints:

1<= T <=100

1<= N <= 1000


Example:

Input:

1

7

aebcbda

Output:

2*/

#include <stdio.h>
#include <stdlib.h>

int max(int x,int y)
{
    return (x>y)?x:y;    
}

int min_del_palin(char* str1,int n)
{
    char* str2;
    str2=(char*)malloc(sizeof(char)*(n+1));
    
    for(int i=n-1;i>=0;i--)
    {
        str2[n-i-1]=str1[i];
    }
    
    str2[n]='\0';
    
    int dp[n+1][n+1];
    
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=dp[0][i]=0;
    }
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(str1[i-1]==str2[j-1])
            {
                dp[i][j]=dp[i-1][j-1]+1;
            }
            else
            {
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    
    return n-dp[n][n];
}

int main() 
{
    int t;
    scanf("%d",&t);
    
    while(t--)
    {
        int n;
        scanf("%d",&n);
        
        char* str;
        str=(char*)malloc(sizeof(char)*(n+1));
        
        scanf("%s",str);
        
        printf("%d\n",min_del_palin(str,n));
    }
	return 0;
}