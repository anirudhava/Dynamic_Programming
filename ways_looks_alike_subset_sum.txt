/*Given a set of m distinct positive integers and a value ‘N’. The problem is to count the total number of ways we can form ‘N’ by 
doing sum of the array elements. Repetitions and different arrangements are allowed.

 

Input:

The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case 
contains M and N where M denotes the size of the array and we have to find the answer for the number N.

The second line of each test case contains M space separated integers denoting elements of the array A[ ].


Output:

Print the answer for each test case in a new line. Since the answer can be quite large output the answer modulo 109+7.


Constraints:

1<= M <=1000

1<= N <=1000

0<= A[ ] <=1000


Example:

Input:

1

3 7

1 5 6

Output:

6*/

//In Subset sum Order doesnt matter
//But in Ways to form N using m elements question order matters

//when order doesnt matter then use unbound knapsack
//else use this technique

#include <stdio.h>
#include <stdlib.h>

long int ways(int* arr,int n,int amt)
{
    unsigned long int dp[amt+1];
    
    for(int i=0;i<=amt;i++)
    {
        dp[i]=0;
    }
    
    dp[0]=1;
    
    for(int i=1;i<=amt;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(i>=arr[j])
            {
                dp[i]=(dp[i]%1000000007+dp[i-arr[j]]%1000000007)%1000000007;
            }
        }
    }
    
    return dp[amt]%1000000007;
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    int n;
	    scanf("%d",&n);
	    
	    int amt;
	    scanf("%d",&amt);
	    
	    int* arr;
	    arr=(int*)malloc(sizeof(int)*n);
	    
	    for(int i=0;i<n;i++)
	    {
	        scanf("%d",&arr[i]);
	    }
	    
	    printf("%ld\n",ways(arr,n,amt));
	}
	return 0;
}