/*Given a set of numbers, check whether it can be partitioned into two subsets such that the sum of elements in both subsets is same or not.

Input:
The first line contains an integer 'T' denoting the total number of test cases. Each test case constitutes of two lines.
First line contains 'N', representing the number of elements in the set and the second line contains the elements of the set.

Output:
Print YES if the given set can be partioned into two subsets such that the sum of elements in both subsets is equal, else print NO.

Constraints:
1 <= T <= 100
1 <= N <= 100
0 <= arr[i] <= 1000

Example:
Input:
2
4
1 5 11 5
3
1 3 5 

Output:
YES
NO
*/
#include <stdio.h>
#include <stdlib.h>

int max(int x,int y)
{
    return (x>y)?x:y;
}

int subset_sum(int* arr,int n,int sum)
{
    char dp[n+1][sum+1];//int dp[n+1][sum+1] requires alot of space => stack overflow and segmentation fault
    
    for(int i=0;i<=n;i++)
    {
        dp[i][0]='1';
    }
    
    for(int i=0;i<=sum;i++)
    {
        dp[0][i]='0';
    }
    
    dp[0][0]='1';
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=sum;j++)
        {
            if(arr[i-1]<=j)
            {
                dp[i][j]=((dp[i-1][j]-'0') || (dp[i-1][j-arr[i-1]]-'0'))+'0';
            }
            else if(arr[i-1]>j)
            {
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    
    return dp[n][sum]-'0';
}


/*int subset_sum(int* arr,int n,int sum)
{
    if(sum==0)
    {
        return 1;
    }
    
    if(n==0)
    {
        return 0;
    }
    
    if(arr[n-1]<=sum)
    {
        return subset_sum(arr,n-1,sum) || subset_sum(arr,n-1,sum-arr[n-1]);
    }
    
    else if(arr[n-1]>sum)
    {
        return subset_sum(arr,n-1,sum);
    }
}
*/
int equal_sum_partition(int* arr,int n)
{
    int sum=0;
    
    for(int i=0;i<n;i++)
    {
        sum+=arr[i];
    }
    
    if(sum%2)//if sum is odd then the array cannot be divided into 2 parts having equal sum
        return 0;
    else//sum is even
        return subset_sum(arr,n,sum/2);
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    int n;
	    scanf("%d",&n);
	    
	    int* arr;
	    arr=(int*)malloc(sizeof(int)*n);
	    
	    for(int i=0;i<n;i++)
	    {
	        scanf("%d",&arr[i]);
	    }
	    
	    if(equal_sum_partition(arr,n))
	    {
	        printf("YES\n");
	    }
	    else
	    {
	        printf("NO\n");
	    }
	}
	return 0;
}