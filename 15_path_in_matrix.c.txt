/*Given a N X N  matrix Matrix[N][N] of positive integers.  There are only three possible moves from a cell Matrix[r][c].

1. Matrix[r+1][c]

2. Matrix[r+1][c-1]

3. Matrix[r+1][c+1]

Starting from any column in row 0, return the largest sum of any of the paths up to row N-1.

Input:
The first line of the input contains an integer T denoting the number of test cases. The description of T test cases follows.
The first line of each test case contains a single integer N denoting the order of matrix. Next line contains N*N integers denoting the elements 
of the matrix in row-major form.

Output:
Output the largest sum of any of the paths starting from any cell of row 0 to any cell of row N-1. Print the output of each test case in a new line.

Constraints:
1<=T<=20
2<=N<=20
1<=Matrix[i][j]<=1000 (for all 1<=i<=N && 1<=j<=N)

Example:

Input:
1
2
348 391 618 193

Output:
1009*/
#include <stdio.h>
#include <stdlib.h>

int max2(int x,int y)
{
    return (x>y)?x:y;
}

int max3(int x,int y,int z)
{
    return max2(x,max2(y,z));
}

int max_sum(int** a,int n)
{
    if(n==1)
    {
        return a[0][0];
    }
                
    int dp[n][n];
    
    int max=a[0][0];
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            dp[i][j]=a[i][j];
            
            if(max < dp[i][j])
                max=dp[i][j];
        }
    }
    
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(j==0)
            {
                dp[i][j]=a[i][j]+max2(dp[i-1][j],dp[i-1][j+1]);
            }
            else if(j==n-1)
            {
                dp[i][j]=a[i][j]+max2(dp[i-1][j],dp[i-1][j-1]);
            }
            else
            {
                dp[i][j]=a[i][j]+max3(dp[i-1][j],dp[i-1][j+1],dp[i-1][j-1]);
            }
            
            if(max < dp[i][j])
                max=dp[i][j];
        }
    }
    
    return max;
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    int n;
	    scanf("%d",&n);
	    
	    int** a;
	    a=(int**)malloc(sizeof(int*)*n);
	    
	    for(int i=0;i<n;i++)
	    {
	        a[i]=(int*)malloc(sizeof(int)*n);
	    }
	    
	    for(int i=0;i<n;i++)
	    {
	        for(int j=0;j<n;j++)
	        {
	            scanf("%d",&a[i][j]);
	        }
	    }
	    
	    printf("%d\n",max_sum(a,n));
	}
	return 0;
}