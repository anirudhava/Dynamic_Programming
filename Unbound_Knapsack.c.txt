/*Given weights and values related to n items and the maximum capacity allowed for these items. What is the maximum value we can achieve 
if we can pick any weights any number of times for a total allowed weight of W?

Input:
The first line of input contains an integer denoting the number of test cases. Then T test cases follow . Each test case contains two integers N 
and W denoting the number of items and the total allowed weight. In the next two lines are space separated values of the array denoting values 
of the items (val[]) and their weights (wt[]) respectively.

Output:
For each test case, in a new line, print the  maximum value which we can achieve if we can pick any weights any number of times for a bag of size W.

Constraints:
1 <= T <= 100
1 <= N, W <= 103
1 <= wt[], val[] <= 100

Example:
Input:
2
2 3
1 1
2 1 
4 8
1 4 5 7
1 3 4 5
Output:
3
11*/
#include <stdio.h>
#include <stdlib.h>

int max(int x,int y)
{
    return (x>y)?x:y;
}

int Unbound_Ks(int* wt,int* val,int n,int w)
{
    int dp[n+1][w+1];
    
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=0;
    }
    
    for(int i=0;i<=w;i++)
    {
        dp[0][i]=0;
    }
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=w;j++)
        {
            if(wt[i-1]<=j)
            {
                dp[i][j]=max(dp[i-1][j],val[i-1]+dp[i][j-wt[i-1]]);
            }
            else//wt[i-1]>j
            {
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    
    return dp[n][w];
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    int n;
	    int w;
	    
	    scanf("%d",&n);
	    scanf("%d",&w);
	    
	    int* val;
	    int* wt;
	    
	    val=(int*)malloc(sizeof(int)*n);
	    wt=(int*)malloc(sizeof(int)*n);
	    
	    for(int i=0;i<n;i++)
	    {
	        scanf("%d",&val[i]);
	    }
	    
	    for(int i=0;i<n;i++)
	    {
	        scanf("%d",&wt[i]);
	    }
	    
	    printf("%d\n",Unbound_Ks(wt,val,n,w));
	}
	return 0;
}