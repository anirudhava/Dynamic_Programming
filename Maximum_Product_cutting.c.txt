#include <stdio.h>
//#include <limits.h>
//#include <math.h>

int max(int x,int y)
{
    return (x>y)?x:y;    
}

/*int max;

int max2(int x,int y)
{
    return (x>y)?x:y;    
}

int max_prod(int n)
{
    if(n<=1)
    {
        return 1;
    }
    
    for(int i=1;i<n-1;i++)
    {
        int x=max2(i*(n-i),max_prod(n-i)*i);
        
        if(x>max)
            max=x;
    }
    
    return max;
}
*/

/*long int max_prod(int n)
{
    int dp[n+1];
    
    dp[0]=1;
    dp[1]=1;
    
    for(int i=2;i<=n;i++)
    {
        dp[i]=INT_MIN;
        
        for(int j=1;j<i;j++)
        {
            int x=max(j*(i-j),dp[i-j]*j);
            
            if(x>dp[i])
                dp[i]=x;
        }
    }
    
    return dp[n];
}*/

//By observing pattern

long long int pow(int n,long long int k)//n^k
{
    long long int p=1;
    
    for(long long int i=0;i<k;i++)
    {
        p=(p*n)%1000000007;
    }
    
    return p;
}

long long int max_prod(long long int n)
{
    if(n==2)
        return 1;
    
    if(n==3)
        return 2;
    
    if(n%3==0)
    {
        return (pow(3,n/3))%1000000007;
    }
    
    if(n%3==1)
    {
        return ((4*pow(3,((n-1)/3)-1)))%1000000007;
    }
    
    if(n%3==2)
    {
        return ((2*pow(3,((n+1)/3)-1)))%1000000007;
    }
}

int main() {
	
	//max=INT_MIN;
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    long long int n;
	    scanf("%lld",&n);
	    
	    printf("%lld\n",max_prod(n));
	}
	return 0;
}