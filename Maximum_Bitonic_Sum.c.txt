/*Given an array of integers A. A subsequence of A is called Bitonic if it is first increasing then decreasing.

Input:
The first line contains an integer T denoting the no of test cases. Each test case consist of two lines. The first line contains an integer N
denoting the size of the array. Then in the next line are N space separated values of the array A[].

Output:
For each test case in a new line print the max sum bitonic subsequence.

Constraints:
1<=T<=100
1<=N<=50
1<=A[]<=100

Example:
Input:
2
6
80 60 30 40 20 10
9
1 15 51 45 33 100 12 18 9

Output:
210
194

Explanation:
Testcase2:
Input : A[] = {1, 15, 51, 45, 33, 100, 12, 18, 9}
Output : 194
 Bi-tonic Sub-sequence are :
{1, 51, 9}
{1, 50, 100, 18, 9}
{1, 15, 51, 100, 18, 9}
{1, 15, 45, 100, 12, 9}
{1, 15, 45, 100, 18, 9} .. so on           
Maximum sum Bi-tonic sub-sequence is 1 + 15 + 51 + 100 + 18 + 9 = 194*/

#include <stdio.h>
#include <stdlib.h>

int Maximum_Sum_Bitonic_Subsequence(int* arr,int n)
{   
    int inc[n];
    inc[0]=arr[0];
    
    for(int i=1;i<n;i++)//LIS from left to right
    {
        inc[i]=arr[i];
        
        for(int j=0;j<i;j++)
        {
            if(arr[i]>arr[j] && inc[i]<inc[j]+arr[i])
            {
                inc[i]=inc[j]+arr[i];
            }
        }
    }
    
    int dec[n];
    dec[n-1]=arr[n-1];
    
    for(int i=n-2;i>=0;i--)//from left to right
    {
        dec[i]=arr[i];
        
        for(int j=n-1;j>i;j--)
        {
            if(arr[i]>arr[j] && dec[i]<dec[j]+arr[i])
            {
                dec[i]=dec[j]+arr[i];
            }
        }
    }
    
    int max=inc[0]+dec[0]-arr[0];
    
    for(int i=1;i<n;i++)
    {
        if(max<inc[i]+dec[i]-arr[i])
            max=inc[i]+dec[i]-arr[i];
    }
    
    return max;
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    int n;
	    scanf("%d",&n);
	    
	    int* arr;
	    arr=(int*)malloc(sizeof(int)*n);
	    
	    for(int i=0;i<n;i++)
	    {
	        scanf("%d",&arr[i]);
	    }
	    
	    printf("%d\n",Maximum_Sum_Bitonic_Subsequence(arr,n));
	}
	return 0;
}