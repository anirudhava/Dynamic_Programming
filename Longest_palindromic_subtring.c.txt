/*Given a string S, find the longest palindromic substring in S. Substring of string S: S[ i . . . . j ] where 0 ≤ i ≤ j < len(S). 
Palindrome string: A string which reads the same backwards. More formally, S is palindrome if reverse(S) = S. Incase of conflict, 
return the substring which occurs first ( with the least starting index ).

NOTE: Required Time Complexity O(n2).

Input:
The first line of input consists number of the testcases. The following T lines consist of a string each.

Output:
In each separate line print the longest palindrome of the string given in the respective test case.

Constraints:
1 ≤ T ≤ 100
1 ≤ Str Length ≤ 104

Example:
Input:
1
aaaabbaa

Output:
aabbaa

Explanation:
Testcase 1: The longest palindrome string present in the given string is "aabbaa".*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void get_longest_palin(char* str,int n)
{
    int dp[n][n];
    
    int d_pos=0;
    int i_pos;
    int j_pos=0;
    
    
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            dp[i][j]=0;
        }
    }
    
    for(int i=0;i<n;i++)
    {
        dp[i][i]=1;
    }
    
    int flag=0;
    
    for(int i=0;i<n-1;i++)
    {
        if(str[i]==str[i+1])
        {
            dp[i][i+1]=1;
            
            if(flag==0)
            {
                flag=1;
                d_pos=1;
                j_pos=i+1;
            }
        }
        else
        {
            dp[i][i+1]=0;
        }
    }
    
    for(int d=2;d<n;d++)
    {
        flag=0;
        
        for(int i=0;i<n-d;i++)
        {
            int j=i+d;
            
            if(str[i]==str[j] && dp[i+1][j-1])
            {
                dp[i][j]=1;
                
                if(flag==0)
                {
                    flag=1;
                    d_pos=d;
                    j_pos=j;
                }
            }
            else
            {
                dp[i][j]=0;
            }
        }
    }
    
    i_pos=j_pos-d_pos;
    
    //print the string from index: i_pos to i_pos+d_pos
    
    for(int i=i_pos;i<=i_pos+d_pos;i++)
    {
        printf("%c",str[i]);
    }
    
    printf("\n");
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	char str[10001];
	
	while(t--)  
	{
	    scanf("%s",str);
	    
	    int n=strlen(str);
	    
	    get_longest_palin(str,n);
	    
	}
	return 0;
}