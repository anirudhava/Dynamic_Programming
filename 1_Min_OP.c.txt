/*
You are given a number N. You have to find the number of operations required to reach N from 0. 
You have 2 operations available:

Double the number
Add one to the number
Input:
The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. 
Each test case contains an integer N.

Output:
For each test case, in a new line, print the minimum number of operations required to reach N from 0.

Constraints:
1<=T<=100
1<=N<=104

Example:
Input:
2
8
7
Input:
4
5

Explanation:
Testcase1:
Input  : N = 8
Output : 4
0 + 1 = 1, 1 + 1 = 2, 2 * 2 = 4, 4 * 2 = 8
Testcase2:
Input  : N = 7
Output : 5
0 + 1 = 1, 1 + 1 = 2, 1 + 2 = 3, 3 * 2 = 6, 6 + 1 = 7
*/


#include <stdio.h>
#include <stdlib.h>

int min_op(int n)
{
    int dp[n+1];
    
    dp[0]=0;
    dp[1]=1;
    
    for(int i=2;i<=n;i++)
    {
        if(i%2)//odd
        {
            dp[i]=dp[i-1]+1;
        }
        else
        {
            dp[i]=dp[i/2]+1;
        }
    }
    
    return dp[n];
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    int n;
	    scanf("%d",&n);
	    
	    printf("%d\n",min_op(n));
	    
	}
	return 0;
}