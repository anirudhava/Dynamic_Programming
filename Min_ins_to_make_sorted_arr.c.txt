/*Given an array of integer numbers, we need to sort this array in a minimum number of steps where in one step we can insert any 
array element from its position to any other position.

 

Input:

The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. The first line of each test case 
contains an integer N denoting the size of array A.

The second line of each test case contains N space separated integers denoting elements of the array A[ ].


Output:

Output the minimum steps needed to sort the array. Print the answer for each test case in a new line.


Constraints:

1<= T <=100

1<= N <=1000

1<= A[ ] <=1000


Example:

Input:

1

7

2 3 5 1 4 7 6

Output:

3*/

#include <stdio.h>
#include <stdlib.h>

int compare(const void* p,const void* q)
{
    return *(int*)p - *(int*)q;
}

int max(int x,int y)
{
    return (x>y)?x:y;
}

int min_ins(int* arr,int n)
{
    int* b;
    b=(int*)malloc(sizeof(int)*n);
    
    for(int i=0;i<n;i++)
    {
        b[i]=arr[i];
    }
    
    qsort(arr,n,sizeof(arr[0]),compare);
    
    int dp[n+1][n+1];
    
    for(int i=0;i<=n;i++)
    {
        dp[i][0]=dp[0][i]=0;
    }
    
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            if(b[i-1]==arr[j-1])
            {
                dp[i][j]=dp[i-1][j-1]+1;
            }
            else
            {
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    
    return n-dp[n][n];
}

int main() {
	
	int t;
	scanf("%d",&t);
	
	while(t--)
	{
	    int n;
	    scanf("%d",&n);
	    
	    int* arr;
	    arr=(int*)malloc(sizeof(int)*n);
	    
	    for(int i=0;i<n;i++)
	    {
	        scanf("%d",&arr[i]);
	    }
	    
	    printf("%d\n",min_ins(arr,n));
	}
	
	return 0;
}